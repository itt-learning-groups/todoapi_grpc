// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package todoapiv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TodoapiServiceClient is the client API for TodoapiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TodoapiServiceClient interface {
	CreateTodo(ctx context.Context, in *CreateTodoRequest, opts ...grpc.CallOption) (*CreateTodoResponse, error)
}

type todoapiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTodoapiServiceClient(cc grpc.ClientConnInterface) TodoapiServiceClient {
	return &todoapiServiceClient{cc}
}

func (c *todoapiServiceClient) CreateTodo(ctx context.Context, in *CreateTodoRequest, opts ...grpc.CallOption) (*CreateTodoResponse, error) {
	out := new(CreateTodoResponse)
	err := c.cc.Invoke(ctx, "/todoapi.v1.TodoapiService/CreateTodo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TodoapiServiceServer is the server API for TodoapiService service.
// All implementations should embed UnimplementedTodoapiServiceServer
// for forward compatibility
type TodoapiServiceServer interface {
	CreateTodo(context.Context, *CreateTodoRequest) (*CreateTodoResponse, error)
}

// UnimplementedTodoapiServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTodoapiServiceServer struct {
}

func (UnimplementedTodoapiServiceServer) CreateTodo(context.Context, *CreateTodoRequest) (*CreateTodoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTodo not implemented")
}

// UnsafeTodoapiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TodoapiServiceServer will
// result in compilation errors.
type UnsafeTodoapiServiceServer interface {
	mustEmbedUnimplementedTodoapiServiceServer()
}

func RegisterTodoapiServiceServer(s grpc.ServiceRegistrar, srv TodoapiServiceServer) {
	s.RegisterService(&TodoapiService_ServiceDesc, srv)
}

func _TodoapiService_CreateTodo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTodoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoapiServiceServer).CreateTodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todoapi.v1.TodoapiService/CreateTodo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoapiServiceServer).CreateTodo(ctx, req.(*CreateTodoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TodoapiService_ServiceDesc is the grpc.ServiceDesc for TodoapiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TodoapiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "todoapi.v1.TodoapiService",
	HandlerType: (*TodoapiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTodo",
			Handler:    _TodoapiService_CreateTodo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/todoapi.proto",
}
